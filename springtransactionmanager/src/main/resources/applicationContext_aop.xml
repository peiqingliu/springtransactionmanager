<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
       ">

    <!-- 引入外部 属性文件-->
    <!--<context:property-placeholder location="classpath:jdbc.properties"/>-->
    <!-- 配置c3p0的连接池 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/springcloud?useUnicode=true&amp;characterEncoding=UTF-8"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testWhileIdle" value="true"/>
        <!-- 连接池启动时的初始值 -->
        <property name="initialSize" value="10"/>
        <!-- 连接池的最大值 -->
        <property name="maxActive" value="100"/>
        <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
        <property name="maxIdle" value="50"/>
        <!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
        <property name="minIdle" value="10"/>
        <!--#给出一条简单的sql语句进行验证-->
        <property name="validationQuery" value="select 1"/>
        <!--#在取出连接时进行有效验证-->
        <property name="removeAbandonedTimeout" value="120"/>
        <property name="removeAbandoned" value="true"/>
        <!-- #运行判断连接超时任务的时间间隔，单位为毫秒，默认为-1，即不执行任务。 -->
        <property name="timeBetweenEvictionRunsMillis" value="3600000"/>
        <!-- #连接的超时时间，默认为半小时。 -->
        <property name="minEvictableIdleTimeMillis" value="3600000"/>
    </bean>
    <!-- 基于AspectJ的声明式事务管理-->

    <!-- 第一步：配置事务管理器 -->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 注入dataSource -->
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 第二步：配置事务增强 -->
    <tx:advice id="txadvice" transaction-manager="dataSourceTransactionManager">
        <!-- 做事务操作 -->
        <tx:attributes>
            <!-- 设置进行事务操作的方法匹配规则 -->
            <!--其中*为通配符，即代表以account为开头的所有方法，即表示符合此命名规则的方法作为一个事务。 account开头的所有方法 -->
            <!--
	          propagation:事务传播行为； 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务
	          isolation：事务隔离级别； 默认级别 mysql的默认级别是 REPEATABLE_READ隔离级别
	          read-only：是否只读；
	          rollback-for：发生那些异常时回滚
	          timeout:事务过期时间
	         -->

            <tx:method name="account*" propagation="REQUIRED" isolation="DEFAULT" read-only="false" no-rollback-for="" timeout="-1"/>
        </tx:attributes>
    </tx:advice>

    <!-- 第三步：配置切面 切面即把增强用在方法的过程 -->
    <aop:config>
        <!-- 切入点 -->
        <!--
        execution表达式
        execution 中第一个*表示任何返回类型。要注意一点,类名需要用一个.占位
        *(..)表示任意方法
        -->
        <aop:pointcut id="pointcut1" expression="execution(* com.liupeiqing.transcation.service.OrdersService2.*(..))" />
        <!-- 切面 -->
        <aop:advisor advice-ref="txadvice" pointcut-ref="pointcut1"></aop:advisor>
    </aop:config>

    <!--对象bean的初始化及属性的注入-->
    <bean id="ordersService2" class="com.liupeiqing.transcation.service.OrdersService2">
        <property name="ordersDao" ref="orderDao" />
    </bean>
    <!--初始化orderDao-->
    <bean id="orderDao" class="com.liupeiqing.transcation.dao.OrdersDao">
        <property name="jdbcTemplate" ref="jdbcTemplate"></property>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>

    </bean>


</beans>